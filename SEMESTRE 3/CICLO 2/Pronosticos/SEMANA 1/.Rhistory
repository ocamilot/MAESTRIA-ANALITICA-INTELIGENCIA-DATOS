library(dplyr)
library(PerfomanceAnalytics)
library(fpp3)
library(tsfeatures)
options(warn = - 1)
######################################################
###Primero, generemos una función que ayude a simplificar los tipos de datos que deseamos de la fuente de
#información financiera.
#En este ejemplo, los datos de Cierre y Volúmenes, que dependerán del simbolo o ticker
#del activo y a partir de qué año se consultan:
##Datos:
start<- Sys.Date()-(365*5) # Cinco años atras
end<-Sys.Date()
precios_volumenes <- function(simbolo)
{
# Obtener precios stocks de Yahoo Finance
datos <- getSymbols(simbolo, auto.assign = FALSE, from=start, to=end)
# Eliminando valores faltantes
datos <- na.omit(datos)
# Mantenemos columnas con Precios de Cierre y Volúmenes, columnas 4 y 5 de cada stock:
datos <- datos[, 4:5]
# Para hacer los datos accesibles, asignamos a Global Environment:
assign(simbolo, datos, envir = .GlobalEnv)
}
# Llamamos la función para cada stock desde el 2014:
precios_volumenes("AMZN")
precios_volumenes("NFLX")
precios_volumenes("IBM")
precios_volumenes("SPY")
# Juntamos los datos y renombramos las columnas:
PyV <- merge.xts(AMZN, NFLX, IBM, SPY)
colnames(PyV) <- c("Amazon P.Cierre","Amazon Vol", "Netflix P.Cierre","Netflix Vol",
"IBM P.Cierre", "IBM Vol", "SP500 P.Cierre", "SP500 Vol")
##Serie De Tiempo:
# Podemos generar una gráfica interactiva las variables, en este caso de los precios:
Precios<-  dygraph(PyV[,c(1,3,5,7)], main = "Precios de Amazon, Netflix, IBM y SP&500") %>%
dyAxis("y", label = "Precios") %>%
dyRangeSelector(dateWindow = c("2014-01-01", "2020-07-01")) %>%
dyOptions(colors = RColorBrewer::brewer.pal(4, "Set1"))
Precios
# Podemos ver los 5 ultimos datos redondeando hasta 3 decimales:
round(tail(PyV, n = 5), 3)
#########################################################################################################
# Ejemplo de Panel Data, generemos una list de objetos dygraphs, y para imprimirlos usamos htmltools:
library(dygraphs)
library(htmltools)
dy_graficos <- list(
dygraphs::dygraph(PyV[,c(1,3,5,7)], main = "Precios de Amazon, Netflix, IBM y SP&500"),
dygraphs::dygraph(PyV[,c(2,4,6,8)], main = "Volumenes de Amazon, Netflix, IBM y SP&500"))
# Representemos los objetos dygraphs usando htmltools
htmltools::browsable(htmltools::tagList(dy_graficos))
AMZN_2014<-subset(PyV[,1], index(PyV)>="2014-01-01"& index(PyV)<="2014-12-31")
AMZN_2014[c(1:5, nrow(AMZN_2014))]
#### Ejercicio Analítica Financiera: Tipos de Datos
library(dygraphs)
library(tseries)
library(xts)
library(quantmod)
library(dplyr)
library(PerfomanceAnalytics)
library(fpp3)
library(tsfeatures)
options(warn = - 1)
######################################################
###Primero, generemos una función que ayude a simplificar los tipos de datos que deseamos de la fuente de
#información financiera.
#En este ejemplo, los datos de Cierre y Volúmenes, que dependerán del simbolo o ticker
#del activo y a partir de qué año se consultan:
##Datos:
start<- Sys.Date()-(365*5) # Cinco años atras
end<-Sys.Date()
# Mantenemos columnas con Precios de Cierre y Volúmenes, columnas 4 y 5 de cada stock:
datos <- datos[, 4]
######################################################
###Primero, generemos una función que ayude a simplificar los tipos de datos que deseamos de la fuente de
#información financiera.
#En este ejemplo, los datos de Cierre y Volúmenes, que dependerán del simbolo o ticker
#del activo y a partir de qué año se consultan:
##Datos:
start<- Sys.Date()-(365*5) # Cinco años atras
end<-Sys.Date()
precios_volumenes <- function(simbolo)
{
# Obtener precios stocks de Yahoo Finance
datos <- getSymbols(simbolo, auto.assign = FALSE, from=start, to=end, src="yahoo")
# Eliminando valores faltantes
datos <- na.omit(datos)
# Mantenemos columnas con Precios de Cierre y Volúmenes, columnas 4 y 5 de cada stock:
datos <- datos[, 4]
# Para hacer los datos accesibles, asignamos a Global Environment:
assign(simbolo, datos, envir = .GlobalEnv)
}
# Llamamos la función para cada stock desde el 2014:
precios_volumenes("AMZN")
precios_volumenes("NFLX")
precios_volumenes("IBM")
precios_volumenes("SPY")
# Juntamos los datos y renombramos las columnas:
PyV <- merge.xts(AMZN, NFLX, IBM, SPY)
colnames(PyV) <- c("Amazon P.Cierre","Amazon Vol", "Netflix P.Cierre","Netflix Vol",
"IBM P.Cierre", "IBM Vol", "SP500 P.Cierre", "SP500 Vol")
##Serie De Tiempo:
# Podemos generar una gráfica interactiva las variables, en este caso de los precios:
Precios<-  dygraph(PyV[,c(1,3,5,7)], main = "Precios de Amazon, Netflix, IBM y SP&500") %>%
dyAxis("y", label = "Precios") %>%
dyRangeSelector(dateWindow = c("2014-01-01", "2020-07-01")) %>%
dyOptions(colors = RColorBrewer::brewer.pal(4, "Set1"))
Precios
# Podemos ver los 5 ultimos datos redondeando hasta 3 decimales:
round(tail(PyV, n = 5), 3)
#########################################################################################################
# Ejemplo de Panel Data, generemos una list de objetos dygraphs, y para imprimirlos usamos htmltools:
library(dygraphs)
library(htmltools)
#### Ejercicio Analítica Financiera: Tipos de Datos
library(dygraphs)
library(tseries)
library(xts)
library(quantmod)
library(dplyr)
library(PerfomanceAnalytics)
library(fpp3)
library(tsfeatures)
options(warn = - 1)
######################################################
###Primero, generemos una función que ayude a simplificar los tipos de datos que deseamos de la fuente de
#información financiera.
#En este ejemplo, los datos de Cierre y Volúmenes, que dependerán del simbolo o ticker
#del activo y a partir de qué año se consultan:
##Datos:
start<- Sys.Date()-(365*5) # Cinco años atras
end<-Sys.Date()
#### Ejercicio Analítica Financiera: Tipos de Datos
library(dygraphs)
library(tseries)
library(xts)
library(quantmod)
library(dplyr)
library(PerfomanceAnalytics)
library(fpp3)
library(tsfeatures)
options(warn = - 1)
######################################################
###Primero, generemos una función que ayude a simplificar los tipos de datos que deseamos de la fuente de
#información financiera.
#En este ejemplo, los datos de Cierre y Volúmenes, que dependerán del simbolo o ticker
#del activo y a partir de qué año se consultan:
##Datos:
start<- Sys.Date()-(365*5) # Cinco años atras
end<-Sys.Date()
precios_volumenes <- function(simbolo)
{
# Obtener precios stocks de Yahoo Finance
datos <- getSymbols(simbolo, auto.assign = FALSE, from=start, to=end, src="yahoo")
# Eliminando valores faltantes
datos <- na.omit(datos)
# Mantenemos columnas con Precios de Cierre y Volúmenes, columnas 4 y 5 de cada stock:
datos <- datos[, 4]
# Para hacer los datos accesibles, asignamos a Global Environment:
assign(simbolo, datos, envir = .GlobalEnv)
}
# Llamamos la función para cada stock desde el 2014:
precios_volumenes("AMZN")
precios_volumenes("NFLX")
precios_volumenes("IBM")
#### Ejercicio Analítica Financiera: Tipos de Datos
library(dygraphs)
library(tseries)
library(xts)
library(quantmod)
library(dplyr)
library(PerfomanceAnalytics)
library(fpp3)
library(tsfeatures)
options(warn = - 1)
######################################################
###Primero, generemos una función que ayude a simplificar los tipos de datos que deseamos de la fuente de
#información financiera.
#En este ejemplo, los datos de Cierre y Volúmenes, que dependerán del simbolo o ticker
#del activo y a partir de qué año se consultan:
##Datos:
start<- Sys.Date()-(365*5) # Cinco años atras
end<-Sys.Date()
precios_volumenes <- function(simbolo)
{
# Obtener precios stocks de Yahoo Finance
datos <- getSymbols(simbolo, auto.assign = FALSE, from=start, to=end, src="yahoo")
# Eliminando valores faltantes
datos <- na.omit(datos)
# Mantenemos columnas con Precios de Cierre y Volúmenes, columnas 4 y 5 de cada stock:
datos <- datos[, 4]
# Para hacer los datos accesibles, asignamos a Global Environment:
assign(simbolo, datos, envir = .GlobalEnv)
}
#Llamar al activo
recios("XOM")
#Llamar al activo
precios("XOM")
precios
precios <- function(simbolo)
{
# Obtener precios stocks de Yahoo Finance
datos <- getSymbols(simbolo, auto.assign = FALSE, from=start, to=end, src="yahoo")
# Eliminando valores faltantes
datos <- na.omit(datos)
# Mantenemos columnas con Precios de Cierre y Volúmenes, columnas 4 y 5 de cada stock:
datos <- datos[, 4]
# Para hacer los datos accesibles, asignamos a Global Environment:
assign(simbolo, datos, envir = .GlobalEnv)
}
#Llamar al activo
precios("XOM")
tail(XOM)
colnames(XOM) <- "xom"
str(XOM)
tail(XOM)
str(XOM)
Precios <- dygraph(XOM, main = "Precios x")
dyAxis("y", label = "Precios")
dyRabgeSelector(dateWindow = c("2020-03-28", "2025-03-28"))
dyOptions(colrs = rColorBrewer:brewerpal(5, "Set1"))
Precios
Precios <- dygraph(XOM, main = "Precios x")
dyAxis("y", label = "Precios")
Precios <- dygraph(XOM, main = "Precios x")
dyAxis("y", label = "Precios") %>%
dyRabgeSelector(dateWindow = c("2020-03-28", "2025-03-28"))
dyAxis("y", label = "Precios") %>%
dyRabgeSelector(dateWindow = c("2020-03-28", "2025-03-28"))
Precios <- dygraph(XOM, main = "Precios x")
dyAxis("y", label = "Precios") %>%
dyRabgeSelector(dateWindow = c("2020-03-28", "2025-03-28"))
dyAxis("y", label = "Precios") %>%
dyRangeSelector(dateWindow = c("2020-03-28", "2025-03-28")) %>%
dyOptions(colrs = rColorBrewer:brewerpal(5, "Set1"))
dyAxis("y", label = "Precios") %>%
dyRangeSelector(dateWindow = c("2020-03-28", "2025-03-28")) %>%
dyOptions(colors = rColorBrewer:brewerpal(5, "Set1"))
dyAxis("y", label = "Precios") %>%
dyRangeSelector(dateWindow = c("2020-03-28", "2025-03-28")) %>%
dyOptions(colors = RColorBrewer:brewerpal(5, "Set1"))
dyAxis("y", label = "Precios") %>%
dyRangeSelector(dateWindow = c("2020-03-28", "2025-03-28")) %>%
dyOptions(colors = RColorBrewer:brewer.pal(5, "Set1"))
Precios <- dygraph(XOM, main = "Precios x")
dyAxis("y", label = "Precios") %>%
dyRangeSelector(dateWindow = c("2020-03-28", "2025-03-28")) %>%
dyOptions(colors = RColorBrewer:brewer.pal(5, "Set1"))
install.packages("RColorBrewer")
install.packages("RColorBrewer")
#### Ejercicio Analítica Financiera: Tipos de Datos
library(dygraphs)
library(tseries)
library(xts)
library(quantmod)
library(dplyr)
library(PerfomanceAnalytics)
library(fpp3)
library(tsfeatures)
######################################################
###Primero, generemos una función que ayude a simplificar los tipos de datos que deseamos de la fuente de
#información financiera.
#En este ejemplo, los datos de Cierre y Volúmenes, que dependerán del simbolo o ticker
#del activo y a partir de qué año se consultan:
##Datos:
start<- Sys.Date()-(365*5) # Cinco años atras
end<-Sys.Date()
precios <- function(simbolo)
{
# Obtener precios stocks de Yahoo Finance
datos <- getSymbols(simbolo, auto.assign = FALSE, from=start, to=end, src="yahoo")
# Eliminando valores faltantes
datos <- na.omit(datos)
# Mantenemos columnas con Precios de Cierre y Volúmenes, columnas 4 y 5 de cada stock:
datos <- datos[, 4]
# Para hacer los datos accesibles, asignamos a Global Environment:
assign(simbolo, datos, envir = .GlobalEnv)
}
#Llamar al activo
precios("XOM")
tail(XOM)
colnames(XOM) <- "xom"
str(XOM)
Precios <- dygraph(XOM, main = "Precios x")
dyAxis("y", label = "Precios") %>%
dyRangeSelector(dateWindow = c("2020-03-28", "2025-03-28")) %>%
dyOptions(colors = RColorBrewer:brewer.pal(5, "Set1"))
library(RColorBrewer)
Precios <- dygraph(XOM, main = "Precios x")
dyAxis("y", label = "Precios") %>%
dyRangeSelector(dateWindow = c("2020-03-28", "2025-03-28")) %>%
dyOptions(colors = RColorBrewer:brewer.pal(5, "Set1"))
dyAxis("y", label = "Precios") %>%
dyRangeSelector(dateWindow = c("2020-03-28", "2025-03-28")) %>%
dyOptions(colors = RColorBrewer::brewer.pal(5, "Set1"))
Precios <- dygraph(XOM, main = "Precios x")
dyAxis("y", label = "Precios") %>%
dyRangeSelector(dateWindow = c("2020-03-28", "2025-03-28")) %>%
dyOptions(colors = RColorBrewer::brewer.pal(5, "Set1"))
Precios <- dygraph(XOM, main = "Precios x")
dyAxis("y", label = "Precios") %>%
dyRangeSelector(dateWindow = c("2020-03-28", "2025-03-28")) %>%
dyOptions(colors = RColorBrewer::brewer.pal(5, "Set1"))
Precios <- dygraph(XOM, main = "Precios x") %>%
dyAxis("y", label = "Precios") %>%
dyRangeSelector(dateWindow = c("2020-03-28", "2025-03-28")) %>%
dyOptions(colors = RColorBrewer::brewer.pal(5, "Set1"))
Precios
Precios <- dygraph(XOM, main = "Precios x") %>%
dyAxis("y", label = "Precios") %>%
dyRangeSelector(dateWindow = c("2020-03-28", "2025-03-28")) %>%
dyOptions(colors = RColorBrewer::brewer.pal(5, "Set1"))
Precios
# Rendimiento Simple
precio_ayer <- lag.xts(XOM, 1)
precio_ayer
XOM
# Rendimiento Simple: Previo de hoy menos precio de ayer / precio ayer
precio_ayer <- lag.xts(XOM, 1)
rs_b<- ((XOM - precio_ayer)/(precio_ayer))[-1,]
head(rs_b)
# Con libreria quantmode
rs_spy2<- periodReturn(XOM, period = "daily", type = "arythmetic")
# Con libreria quantmode
rs_spy2<- periodReturn(XOM, period = "daily", type = "arithmetic")
head(rs_spy2)
#Rendimiento logaritmico
rl_spy<- diff(log(XOM))[-1]
head(rl_spy)
#Features
library(tsatures)
#Features
library(tsfeatures)
install.packages("tsfeatures", type = "binary")
#Features
library(tsfeatures)
#Con paqueteria
rl_spy2<- periodReturn(XOM, period = "daily", type = "log")
head(rl_spy2)
#Features
# PARA INSTALAR LIBRERIAS install.packages("tsfeatures", type = "binary")
library(tsfeatures)
x
tsfeatures(XOM)
tsfeatures(XOM)# De la salida de esta linea tenemos:
tsfeatures(XOM)# De la salida de esta linea tenemos:
tsfeatures(XOM)# De la salida de esta linea tenemos:
#frequency: Nuestra frecuencia es diaria, esto se denota con el valor 1 en la columna
#frequency: Nuestra frecuencia es diaria, esto se denota con el valor 1 en la columna
#nperiods: Identifica si hay estacionalidad (Es decir si identifica que cada X tiempo se repite algo)
#Features
# PARA INSTALAR LIBRERIAS install.packages("tsfeatures", type = "binary")
library(tsfeatures)
tsfeatures(XOM)# De la salida de esta linea tenemos:
adf.test(XOM) #Es una funcion que nos va a decir si la serie es estacionaria o no.
#Ahora quiero hacer el mimos analisis de ADF, pero sobre los precios y no los  rendimeintos de la accion.
db=diff(XOM, 1) %>% na.omit()#El 1 en diff(XOM, 1) es para restar el dia anterior, podria ponerlo 2, o 7.TRambien puedo dejarlo sin el 1, es ll mismo, la funcion por defecto deja 1. La ultima parte de la linea es para borrar los NAs.
adf.test(db)
#Ahora podemos ver los features
pacf(db)
# La grafica que se genera me muestra la correlacion que tienen los datos a lo largo del tiempo. Voy a ver las medidas de dependencia que hay entre los eventos en el tiempo.
# Las lienas puntiadas son el nivel de significancia (5%). Podemos ver que hay datos que se salen del nivel de significancia.
# El LAG 0 es al dia de hoy, y despues empiezo a ver la correlacion con datos del pasado, un LAG de 11 se puede ver que hay un nivel de significancia superior, asi como en 20 o 30.
# Puedo aumentar el lag:
pacf(db, 50)
#EXTRAER DATOS DE LA FRED -> DATOS EXOGENOS QUE PUEDO USAR PARA ANALIZAR: DATOS COMO GDP, INFLACION, ETC.
precios2 <- function(sim)
{
datos<- getSymbols.FRED(sim, from=start, to=end, return.class = "xts", auto.assign=FALSE)
datos<- na.omit(datos)
datos<- datos[,1]
#Adiciono una funcion de rendimientos de una
rend<- periodReturn(datos, period = "day", type = "arithmetic")
#Hacer datos accesibles a global
assign(sim, rend, envir = .GlobalEnv)
}
#Extraemos la info por ejemplo el GDP
precios2("GDP")
plot(GDP)
tail(GDP)
#EXTRAER DATOS DE LA FRED -> DATOS EXOGENOS QUE PUEDO USAR PARA ANALIZAR: DATOS COMO GDP, INFLACION, ETC.
precios2 <- function(sim)
{
datos<- getSymbols.FRED(sim, from=start, to=end, return.class = "xts", auto.assign=FALSE)
datos<- na.omit(datos)
datos<- datos[,1]
#Adiciono una funcion de rendimientos de una
rend<- periodReturn(datos, period = "day", type = "arithmetic")
#Hacer datos accesibles a global
assign(sim, rend, envir = .GlobalEnv)
}
#Extraemos la info por ejemplo el GDP
precios2("GDP")
#EXTRAER DATOS DE LA FRED -> DATOS EXOGENOS QUE PUEDO USAR PARA ANALIZAR: DATOS COMO GDP, INFLACION, ETC.
precios2 <- function(sim)
{
datos<- getSymbols.FRED(sim, from=start, to=end, return.class = "xts", auto.assign=FALSE)
datos<- na.omit(datos)
datos<- datos[,1]
#Adiciono una funcion de rendimientos de una
rend<- periodReturn(datos, period = "day", type = "arithmetic")
#Hacer datos accesibles a global
assign(sim, rend, envir = .GlobalEnv)
}
#Extraemos la info por ejemplo el GDP
precios2("GDP")
#### Ejercicio Analítica Financiera: Tipos de Datos
# PARA INSTALAR LIBRERIAS install.packages("tsfeatures", type = "binary")
library(dygraphs)
library(tseries)
library(xts)
library(quantmod)
library(dplyr)
library(PerfomanceAnalytics)
library(fpp3)
library(tsfeatures)
options(warn = - 1)
######################################################
###Primero, generemos una función que ayude a simplificar los tipos de datos que deseamos de la fuente de
#información financiera.
#En este ejemplo, los datos de Cierre y Volúmenes, que dependerán del simbolo o ticker
#del activo y a partir de qué año se consultan:
##Datos:
start<- Sys.Date()-(365*5) # Cinco años atras
end<-Sys.Date()
precios <- function(simbolo)
{
# Obtener precios stocks de Yahoo Finance
datos <- getSymbols(simbolo, auto.assign = FALSE, from=start, to=end, src="yahoo")
# Eliminando valores faltantes
datos <- na.omit(datos)
# Mantenemos columnas con Precios de Cierre y Volúmenes, columnas 4 y 5 de cada stock:
datos <- datos[, 4]
# Para hacer los datos accesibles, asignamos a Global Environment:
assign(simbolo, datos, envir = .GlobalEnv)
}
#Llamar al activo
precios("XOM")
tail(XOM)
colnames(XOM) <- "xom"
str(XOM)
Precios <- dygraph(XOM, main = "Precios x") %>%
dyAxis("y", label = "Precios") %>%
dyRangeSelector(dateWindow = c("2020-03-28", "2025-03-28")) %>%
dyOptions(colors = RColorBrewer::brewer.pal(5, "Set1"))
Precios
# Rendimiento Simple: Precio de hoy menos precio de ayer / precio ayer
precio_ayer <- lag.xts(XOM, 1)
rs_b<- ((XOM - precio_ayer)/(precio_ayer))[-1,] #El -1 es para omitir el primer renglon que tiene un valor NA, lo cual es normal con series de tiempo cuando hago el LAG, por que hay una fecha que no tendra valor.
head(rs_b)
# Con libreria quantmode
rs_spy2<- periodReturn(XOM, period = "daily", type = "arithmetic")
head(rs_spy2)
#Rendimiento logaritmico
rl_spy<- diff(log(XOM))[-1]
head(rl_spy)
#Con paqueteria
rl_spy2<- periodReturn(XOM, period = "daily", type = "log")
head(rl_spy2)
#Features
# PARA INSTALAR LIBRERIAS install.packages("tsfeatures", type = "binary")
library(tsfeatures)
tsfeatures(XOM)# De la salida de esta linea tenemos:
adf.test(XOM) #Es una funcion (Augmented Dickey-Fuller Test) que nos va a decir si la serie es estacionaria o no. Nos dice:
#Ahora quiero hacer el mimos analisis de ADF, pero sobre los precios y no los  rendimeintos de la accion.
#1. Resto los precios del dia anterior.
db=diff(XOM, 1) %>% na.omit()#El 1 en diff(XOM, 1) es para restar el dia anterior, podria ponerlo 2, o 7.TRambien puedo dejarlo sin el 1, es ll mismo, la funcion por defecto deja 1. La ultima parte de la linea es para borrar los NAs.
# Hago la prueba de mi hipotesis
adf.test(db)
#Ahora podemos ver los rezagos:
pacf(db)
# La grafica que se genera me muestra la correlacion que tienen los datos a lo largo del tiempo. Voy a ver las medidas de dependencia que hay entre los eventos en el tiempo.
# Las lienas puntiadas son el nivel de significancia (5%). Podemos ver que hay datos que se salen del nivel de significancia.
# El LAG 0 es al dia de hoy, y despues empiezo a ver la correlacion con datos del pasado, un LAG de 11 se puede ver que hay un nivel de significancia superior, asi como en 20 o 30.
# Puedo aumentar el lag:
pacf(db, 50)
#EXTRAER DATOS DE LA FRED -> DATOS EXOGENOS QUE PUEDO USAR PARA ANALIZAR: DATOS COMO GDP, INFLACION, ETC.
precios2 <- function(sim)
{
datos<- getSymbols.FRED(sim, from=start, to=end, return.class = "xts", auto.assign=FALSE)
datos<- na.omit(datos)
datos<- datos[,1]
#Adiciono una funcion de rendimientos de una
rend<- periodReturn(datos, period = "day", type = "arithmetic")
#Hacer datos accesibles a global
assign(sim, rend, envir = .GlobalEnv)
}
#Extraemos la info por ejemplo el GDP
precios2("GDP")
#EXTRAER DATOS DE LA FRED -> DATOS EXOGENOS QUE PUEDO USAR PARA ANALIZAR: DATOS COMO GDP, INFLACION, ETC.
precios2 <- function(sim)
{
datos<- getSymbols.FRED(sim, from=start, to=end, return.class = "xts", auto.assign=FALSE)
datos<- na.omit(datos)
datos<- datos[,1]
#Adiciono una funcion de rendimientos de una
rend<- periodReturn(datos, period = "daily", type = "arithmetic")
#Hacer datos accesibles a global
assign(sim, rend, envir = .GlobalEnv)
}
#Extraemos la info por ejemplo el GDP
precios2("GDP")
plot(GDP)
tail(GDP)
db <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
pacf(db)
# Cargar librerías necesarias
install.packages("forecast")
# Crear la serie de tiempo
ventas <- c(10, 15, 13, 17, 14, 20, 18, 22, 19, 25, 23, 27, 24, 30, 28)
# Graficar la PACF
pacf(ventas)
